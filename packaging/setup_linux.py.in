import sys
import os.path

from cx_Freeze import setup, Executable, hooks

def load_scipy(finder, module):
    finder.IncludePackage("scipy._lib")
    finder.IncludePackage("scipy.misc")
    finder.IncludePackage("scipy.sparse.csgraph._validation")
    finder.IncludePackage("scipy.sparse._csparsetools")

hooks.load_scipy = load_scipy

search_path = sys.path.copy()
if os.path.exists("/etc/debian_version"):
    python_externalproject_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3/dist-packages/"
    python_install_dir = "@CMAKE_INSTALL_PREFIX@/lib/python3.8/site-packages/"
else:
    python_externalproject_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3.8/site-packages/"
    python_install_dir = "@CMAKE_INSTALL_PREFIX@/lib/python3.8/site-packages/"
search_path.insert(1, python_externalproject_dir)
search_path.insert(2, python_install_dir)

import site
if site.USER_SITE in search_path:
    search_path.remove(site.USER_SITE)

print(search_path, file=sys.stderr)

# Dependencies are automatically detected, but it might need
# fine tuning.
build_options = {
    "build_exe": "package/usr/bin",
    "path": search_path,
    "packages": [
        "appdirs",
        "packaging",
        "cryptography",
        "xml.etree",
        "uuid",
        "UM",
        "cura",
        "zeroconf",
        "netifaces",
        "requests",
        "idna",
        "scipy.spatial",
        "stl",
        "serial",
        "shapely",
        "netifaces",
        "networkx",
        "trimesh",
        "Savitar",
        "PyQt5.QtDBus",
        "Charon",
        "logging",
        "logging.config",
        "logging.handlers",
        "sip5",
    ],
    "include_files": [
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/bin/CuraEngine", ""),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/cura/plugins", "plugins"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/uranium/plugins", "plugins"),
        (os.path.join(python_externalproject_dir, "UM/Qt/qml/UM"), "qml/UM"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/cura/resources", "resources"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/uranium/resources", "resources"),
        ("@CMAKE_PREFIX_PATH@/lib/plugins", "qt/plugins"),
        ("@CMAKE_PREFIX_PATH@/lib/qml", "qt/qml"),
        ("@CMAKE_PREFIX_PATH@/lib/libbz2.so", ""),
        ("@CMAKE_PREFIX_PATH@/lib/libcrypto.so", "libcrypto.so.1.1"),
        ("@CMAKE_PREFIX_PATH@/lib/libffi.so", "libffi.so.7"),
        ("@CMAKE_PREFIX_PATH@/lib/libpython3.8.so.1.0", ""),
        ("@CMAKE_PREFIX_PATH@/lib/libgeos.so", "libgeos.so.3.7.3"),    # For shapely
        ("@CMAKE_PREFIX_PATH@/lib/libgeos_c.so", "libgeos_c-1.so.1"),  # For shapely
        ("@CMAKE_PREFIX_PATH@/lib/liblzma.so", ""),
        ("@CMAKE_PREFIX_PATH@/lib/libnlopt.so", "libnlopt.so.0"),
        ("@CMAKE_PREFIX_PATH@/lib/libopenblas.so", "libopenblas.so.0"),
        ("@CMAKE_PREFIX_PATH@/lib/libopenctm.so", ""), # For opening .CTM files
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Charts.so", "libQt5Charts.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Concurrent.so", "libQt5Concurrent.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Core.so", "libQt5Core.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5DataVisualization.so", "libQt5DataVisualization.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5DBus.so", "libQt5DBus.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Gui.so", "libQt5Gui.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Network.so", "libQt5Network.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5OpenGL.so", "libQt5OpenGL.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Qml.so", "libQt5Qml.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QmlModels.so", "libQt5QmlModels.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QmlWorkerScript.so", "libQt5QmlWorkerScript.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick3DAssetImport.so", "libQt5Quick3DAssetImport.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick3DRender.so", "libQt5Quick3DRender.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick3DRuntimeRender.so", "libQt5Quick3DRuntimeRender.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick3D.so", "libQt5Quick3D.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick3DUtils.so", "libQt5Quick3DUtils.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickControls2.so", "libQt5QuickControls2.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickParticles.so", "libQt5QuickParticles.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickShapes.so", "libQt5QuickShapes.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickTemplates2.so", "libQt5QuickTemplates2.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickTest.so", "libQt5QuickTest.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5QuickWidgets.so", "libQt5QuickWidgets.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Quick.so", "libQt5Quick.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5RemoteObjects.so", "libQt5RemoteObjects.so.5"),
        #("@CMAKE_PREFIX_PATH@/lib/libQt5SerialBus.so", ""),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Sql.so", "libQt5Sql.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Svg.so", "libQt5Svg.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Test.so", "libQt5Test.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5VirtualKeyboard.so", "libQt5VirtualKeyboard.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5WebSockets.so", "libQt5WebSockets.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5WebView.so", "libQt5WebView.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Widgets.so", "libQt5Widgets.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libQt5Xml.so", "libQt5Xml.so.5"),
        ("@CMAKE_PREFIX_PATH@/lib/libssl.so", ""),
        #("@CMAKE_PREFIX_PATH@/openssl.cnf", ""),
    ] + ([ ] if "@CMAKE_SYSTEM_PROCESSOR@" == "armv7l" else [
        ("@CMAKE_PREFIX_PATH@/lib/python3.8/site-packages/numpy.libs", "lib/numpy/core"), # Due to a bug in cx_Freeze, these Numpy extensions don't get packaged properly. See https://github.com/marcelotduarte/cx_Freeze/issues/653
    ]),
    "optimize": 1,
    "bin_path_includes": [
        "@CMAKE_PREFIX_PATH@/lib",
        "/lib",
        "/lib64",
        "/usr/lib",
        "/usr/lib64",
    ],
    "bin_excludes": [
        "ld-linux-x86-64.so.2",
        "ld-linux-armhf.so.3",
        "ld-linux-aarch64.so.1",
        "libarmmem-v7l.so",
        "linux-vdso.so.1",
        "libpthread.so.0",
        "libbsd.so.0",
        "libdl.so.2",
        "librt.so.1",
        "libstdc++.so.6",
        "libm.so.6",
        "libgcc_s.so.1",
        "libc.so.6",
        "libz.so.1",
        "libgcc_s.so.1",
        "libglib-2.0",
        "librt.so.1",
        "libcap.so.2",
        "libEGL.so.1",
        "libGLESv2.so.2",
        "libGL.so.1",
        "libGLX.so.0",
        "libGLdispatch.so.0",
        "libglapi.so.0",
        "libXext.so.6",
        "libXdamage.so.1",
        "libXfixes.so.3",
        "libX11-xcb.so.1",
        "libX11.so.6",
        "libxcb-icccm.so.4",
        "libxcb-image.so.0",
        "libxcb-keysyms.so.1",
        "libxcb-randr.so.0",
        "libxcb-render.so.0",
        "libxcb-render-util.so.0",
        "libxcb-shape.so.0",
        "libxcb-shm.so.0",
        "libxcb-util.so.0",
        "libxcb-xinerama.so.0",
        "libxcb-xkb.so.1",
        "libxcb-glx.so.0",
        "libxcb-dri2.so.0",
        "libxcb-dri3.so.0",
        "libxcb-present.so.0",
        "libxcb-sync.so.1",
        "libxcb-xfixes.so.0",
        "libxcb-fixes.so.1",
        "libXdmcp.so.6",
        "libxshmfence.so.1",
        "libwayland-client.so.0",
        "libwayland-server.so.0",
        "libxkbcommon.so.0",
        "libxkbcommon-x11.so.0",
        "libmirclient.so.9",
        "libmircommon.so.7",
        "libmircore.so.1",
        "libmirprotobuf.so.3",
        "libtinfo.so.5",
        "libreadline.so.6",
        "libxcb.so.1",
        "libXxf86vm.so.1",
        "libdrm.so.2",
        "libexpat.so.1",
        "libXau.so.6",
        "libglib-2.0.so.0",
        "libgssapi_krb5.so.",
        "libgthread-2.0.so.0",
        "libk5crypto.so.3",
        "libkeyutils.so.1",
        "libkrb5.so.3",
        "libkrb5support.so.0",
        "libresolv.so.2",
        "libutil.so.1",
        "libXrender.so.1",
        "libcom_err.so.2",
        "libgssapi_krb5.so.2",
        "libopenblas.so.0",
        "libgfortran.so.5",
        "libpng16.so.16",
        "libQt5Charts.so.5",
        "libQt5Concurrent.so.5",
        "libQt5Core.so.5",
        "libQt5DataVisualization.so.5",
        "libQt5DBus.so.5",
        "libQt5Gui.so.5",
        "libQt5Network.so.5",
        "libQt5OpenGL.so.5",
        "libQt5Qml.so.5",
        "libQt5QmlModels.so.5",
        "libQt5QmlWorkerScript.so.5",
        "libQt5Quick3DAssetImport.so.5",
        "libQt5Quick3DRender.so.5",
        "libQt5Quick3DRuntimeRender.so.5",
        "libQt5Quick3D.so.5",
        "libQt5Quick3DUtils.so.5",
        "libQt5QuickControls2.so.5",
        "libQt5QuickParticles.so.5",
        "libQt5QuickShapes.so.5",
        "libQt5QuickTemplates2.so.5",
        "libQt5QuickTest.so.5",
        "libQt5QuickWidgets.so.5",
        "libQt5Quick.so.5",
        "libQt5RemoteObjects.so.5",
        "libQt5Sql.so.5",
        "libQt5Svg.so.5",
        "libQt5Test.so.5",
        "libQt5VirtualKeyboard.so.5",
        "libQt5WebSockets.so.5",
        "libQt5WebView.so.5",
        "libQt5Widgets.so.5",
        "libQt5Xml.so.5",
        "libpython3.8.so.1.0",
        "libffi.so.7",
        "libcrypto.so.1.1",
        "libfreetype.so.6",
    ]
}

base = "Win32GUI" if sys.platform == "win32" else None

executables = [
    Executable(os.path.join("@EXTERNALPROJECT_INSTALL_PREFIX@", "bin", "cura"), base = base)
]

setup(
    name = "Ultimaker Cura",
    version = "@CURA_MAJOR_VERSION@.@CURA_MINOR_VERSION@.@CURA_PATCH_VERSION@",
    author = "Ultimaker B.V.",
    url="http://software.ultimaker.com/",
    description = "3D Slicer Software",
    license="GNU LESSER GENERAL PUBLIC LICENSE (LGPL)",

    options = { "build_exe": build_options },
    executables = executables
)
